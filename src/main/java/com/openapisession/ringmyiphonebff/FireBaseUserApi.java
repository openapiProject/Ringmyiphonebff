package com.openapisession.ringmyiphonebff;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-04-05T04:17:14.143551-05:00[America/Chicago]")

@Validated
@Api(value = "FireBaseUser", description = "the FireBaseUser API")
public interface FireBaseUserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Retrieve user information based on logonId", nickname = "getUser", notes = "Retrieves employee name based on logonId.", response = User.class, tags={ "fireBaseUser", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = User.class),
            @ApiResponse(code = 400, message = "Invalid Request", response = Error.class, responseContainer = "List"),
            @ApiResponse(code = 401, message = "Unauthorized", response = Error.class, responseContainer = "List"),
            @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class, responseContainer = "List"),
            @ApiResponse(code = 415, message = "Provided Media Type not supported", response = Error.class, responseContainer = "List"),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class, responseContainer = "List"),
            @ApiResponse(code = 503, message = "Service Unavailable.", response = Error.class, responseContainer = "List"),
            @ApiResponse(code = 200, message = "Generic Error", response = Error.class, responseContainer = "List") })
    @RequestMapping(value = "/firebaseUser/{name}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<User> getUser(@ApiParam(value = "Id of the employee that will be retrieved.",required=true) @PathVariable("name") String name) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"firstName\" : \"Nick\",  \"lastName\" : \"Chang\",  \"email\" : \"test123@gmail.com\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
